#!/usr/bin/env python3

import sys
import os
import warnings
import pandas as pd
from bids import BIDSLayout
from ebids import sync

nlx_dir = sys.argv[1]
bids_dir = sys.argv[2]
sub = sys.argv[3]
ses = sys.argv[4]

sync.prep_nlx_ttl(nlx_dir, bids_dir, sub, ses, 'xmaze')

# read intensity change events sent by display machine
layout = BIDSLayout(bids_dir)
runs = layout.get(task='xmaze', subject=sub, session=ses)

events_file = runs[-1]
send, recv = sync.load_sync_signals(events_file)

# method when we have send signals
spacing = np.min(np.diff(send['event_times'])) / 2
s_range = send['times'][-1] - send['times'][0]
ranges = (slice(recv['times'][0], recv['times'][-1]-s_range, spacing),)
x0 = optim.brute(sync.align1, ranges, (send, recv))
x = optim.fmin(sync.align, (x0 1), (send, recv))

# method when there are no send signals
minwait = 1.3
maxwait = 1.7
blink = 0.5
steps = np.cumsum([0, minwait/2, blink, minwait/2])
vals = np.array([0, 1, 0, 0])
t_conv, s_conv = sync.binary2analog(steps, vals, .01)

# new method, just using the original event times
d_recv = np.hstack((np.diff(recv['event_times']/10e5), 0))
blink_start = ((d_recv > blink-.1) &
               (d_recv < blink+.1) & (recv['event_signal'] == 1))
blink_times = recv['event_times'][blink_start]/10e5
d_blink = np.hstack((np.diff(blink_times), 0))
inseq = (d_blink > minwait-.1) & (d_blink < maxwait+.1)
breaks = np.nonzero(inseq==False)[0]
start = blink_times[np.hstack((0, breaks[:-1] + 1))]

# using the library
times = recv['event_times']/10e5
values = recv['event_signal']
signal = 1
blink = 0.5
minwait = 1.3
maxwait = 1.7
tol = .1
start, finish = sync.find_signal_blocks(times, values, signal,
                                        blink, minwait, maxwait, tol)

f_args = (send, recv)
bounds = ((recv['times'][0], recv['times'][-1]-s_range), (.99, 1.01))
res = optim.differential_evolution(sync.align, bounds, f_args)

import pdb; pdb.set_trace()

coef = sync.align_events(events_file)

sync_file = events_file.path.replace('_events.tsv', '_sync.tsv')
if not os.path.exists(sync_file):
    warnings.warn('Sync file not found: {}'.format(sync_file),
                  RuntimeWarning)

send_times = pd.read_csv(sync_file, delimiter='\t').values.flatten()
send_on = sync_times[::2]
send_off = sync_times[1::2]

# read ttl events received by nlx
ttl_signals = sync.read_nlx_ttl(nlx_dir)
recv_on = ttl_signals['0x0001'] / 10e5
recv_off = ttl_signals['0x0000'] / 10e5

# convert from events to signals
sig_send_times, sig_send = sync.binary2analog(send_on, send_off, .001)
sig_recv_times, sig_recv = sync.binary2analog(recv_on, recv_off, .001)


runs[0].get_df().values

#xmaze.convert_session(raw_dir, bids_dir, sub, ses)
